<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bulmeong.basecamp.store.mapper.StoreSqlMapper">

    <select id="selectCountStoreByAccountId" resultType="int">
        select count(*) from store
        where account_id = #{account_id}
    </select>

    <select id="selectCountStoreByName" resultType="int">
        select count(*) from store
        where name = #{name}
    </select>

    <select id="selectStoreByAccountInfo" resultType="com.bulmeong.basecamp.store.dto.StoreDto">
        select * from store
        where account_id = #{account_id}
        and account_pw = #{account_pw}
    </select>
    
    <insert id="insertStoreDto">
        <selectKey resultType="int" keyProperty="id" order="AFTER">
            select max(id) from store
        </selectKey>
        insert into store(
            account_id,
            account_pw,
            seller,
            phone,
            email,
            name,
            crn,
            postcode,
            address,
            detail_address,
            description,
            status
        )values(
            #{account_id},
            #{account_pw},
            #{seller},
            #{phone},
            #{email},
            #{name},
            #{crn},
            #{postcode},
            #{address},
            #{detail_address},
            #{description},
            '승인완료'
        )
    </insert>

    <insert id="insertStoreDeliveryInfoDto">
        insert into delivery_info(
            store_id,
            origin_postcode,
            origin_address,
            detail_origin_address,
            fee,
            min_amount,
            return_postcode,
            return_address,
            detail_return_address,
            return_delivery_fee
        )values(
            #{store_id},
            #{origin_postcode},
            #{origin_address},
            #{detail_origin_address},
            #{fee},
            #{min_amount},
            #{return_postcode},
            #{return_address},
            #{detail_return_address},
            #{return_delivery_fee}
        )
    </insert>

    <insert id="insertStoreBankAccountDto">
        insert into store_bank_account(
            store_id,
            bank_name,
            account_number,
            account_holder
        )values(
            #{store_id},
            #{bank_name},
            #{account_number},
            #{account_holder}
        )
    </insert>

    <select id="selectStoreBankAccountDtoByStoreId" resultType="com.bulmeong.basecamp.store.dto.StoreBankAccountDto">
        select * from store_bank_account
        where store_id = #{store_id}
    </select>

    <select id="selectProductCategoryAll" resultType="com.bulmeong.basecamp.store.dto.StoreProductCategoryDto">
        select * from product_category
    </select>

    <select id="selectProductSubcategoryByCategoryId" resultType="com.bulmeong.basecamp.store.dto.ProductSubcategoryDto">
        select * from product_subcategory
        where category_id = #{category_id}
    </select>

    <insert id="insertDiscountInfo">
        <selectKey resultType="int" keyProperty="id" order="AFTER">
            select max(id) from store_product_discount
        </selectKey>
        insert into store_product_discount(percentage)values(#{percentage})
    </insert>

    <insert id="insertProduct">
        <selectKey resultType="int" keyProperty="id" order="AFTER">
            select max(id) from store_product
        </selectKey>
        insert into store_product(
            store_id,
            subcategory_id,
            discount_id,
            name,
            description,
            main_image,
            price,
            quantity,
            status
        )values(
            #{store_id},
            #{subcategory_id},
            #{discount_id},
            #{name},
            #{description},
            #{main_image},
            #{price},
            #{quantity},
            '판매가능'
        )
    </insert>

    <insert id="insertOptionName">
        <selectKey resultType="int" keyProperty="id" order="AFTER">
            select max(id) from product_option_name
        </selectKey>
        insert into product_option_name(
            product_id, name
        )values(
            #{product_id}, #{name}
        )
    </insert>

    <insert id="insertOptionValue">
        insert into product_option_value(
            option_id, name
        )values(
            #{option_id}, #{name}
        )
    </insert>

    <insert id="insertAdditionalInfo">
        <selectKey resultType="int" keyProperty="id" order="AFTER">
            select max(id) from additional_info
        </selectKey>
        insert into additional_info(
            additional_price, quantity
        )values(
            #{additional_price}, #{quantity}
        )
    </insert>

    <select id="selectOptionValueIdByName" resultType="int">
        select id from product_option_value
        where name = #{name}
    </select>

    <select id="selectOptionValueIdByData" resultType="int">
        select ov.id from product_option_value ov 
        inner join product_option_name pon on ov.option_id = pon.id
        inner join store_product sp on sp.id = pon.product_id 
        where sp.id = #{product_id}
        and pon.name = #{option_name}
        and ov.name = #{value_name}
    </select>

    <insert id="insertOptionValueAdditionalInfo">
        insert into option_value_additional_info(
            option_value_id,
            additional_info_id
        )values(
            #{option_value_id},
            #{additional_info_id}
        )
    </insert>

    <select id="selectAllProducts" resultType="com.bulmeong.basecamp.store.dto.StoreProductDto">
        select * from store_product
        order by id desc
    </select>

    <select id="selectStoreDtoById" resultType="com.bulmeong.basecamp.store.dto.StoreDto">
        select * from store
        where id = #{id}
    </select>

    <select id="selectDiscountById" resultType="com.bulmeong.basecamp.store.dto.StoreProductDiscountDto">
        select * from store_product_discount
        where id = #{id}
    </select>

    <select id="selectProductCategoryById" resultType="com.bulmeong.basecamp.store.dto.StoreProductCategoryDto">
        select * from product_category
        where id = #{id}
    </select>

    <select id="selectProductDtoListByCategoryId" resultType="com.bulmeong.basecamp.store.dto.StoreProductDto">
        select * from store_product sp 
        inner join product_subcategory ps on sp.subcategory_id = ps.id 
        where ps.category_id = #{id}
        <if test="subcategory_id != null">
            and ps.id = #{subcategory_id}
        </if>
        order by sp.id desc
    </select>

    <select id="countProductDtoByCategoryId" resultType="int">
        select count(*) from store_product sp 
        inner join product_subcategory ps on sp.subcategory_id = ps.id 
        where ps.category_id = #{id}
        <if test="subcategory_id != null">
            and ps.id = #{subcategory_id}
        </if>
    </select>

    <select id="selectProductDtoByID" resultType="com.bulmeong.basecamp.store.dto.StoreProductDto">
        select * from store_product
        where id = #{id}
    </select>

    <select id="selectDeliveryInfoDtoByStoreId" resultType="com.bulmeong.basecamp.store.dto.StoreDeliveryInfoDto">
        select * from delivery_info
        where store_id = #{store_id}
    </select>

    <select id="selectProductWishCount" resultType="int">
        select count(*) from product_wish
        where product_id = #{product_id}
    </select>

    <select id="selectProductWishCountByProductWishDto" resultType="int">
        select count(*) from product_wish
        where user_id = #{user_id}
        and product_id = #{product_id}
    </select>

    <insert id="insertProductWish">
        insert into product_wish(
            user_id, product_id
        )values(
            #{user_id}, #{product_id}
        )
    </insert>

    <delete id="deleteProductWish">
        delete from product_wish
        where user_id = #{user_id}
        and product_id = #{product_id}
    </delete>

    <select id="selectOptionNameListByProductId" resultType="com.bulmeong.basecamp.store.dto.ProductOptionNameDto">
        select * from product_option_name
        where product_id = #{product_id}
    </select>

    <select id="selectOptionValueListByOptionId" resultType="com.bulmeong.basecamp.store.dto.ProductOptionValueDto">
        select * from product_option_value
        where option_id = #{option_id}
    </select>

    <select id="selectNextOptionId" resultType="int">
        select id from product_option_name
        where product_id = #{product_id}
        limit 1 offset #{offset}
    </select>

    <select id="selectAdditionalInfoIdByValueIds" parameterType="int[]" resultType="int">
        select t1.additional_info_id
        from (
            select additional_info_id
            from option_value_additional_info
            where option_value_id = #{valueIds[0]}
        ) t1
        <foreach collection="valueIds" item="valueId" index="index" open=" " separator=" inner join " close="">
            <choose>
                <when test="index != 0">
                    inner join (
                        select additional_info_id
                        from option_value_additional_info
                        where option_value_id = #{valueId}
                    ) t${index + 1} ON t1.additional_info_id = t${index + 1}.additional_info_id
                </when>
            </choose>
        </foreach>
    </select>

    <insert id="insertReviewPoint">
        insert into bc_user_mileage_log(
            user_id, mileage_log, change_amount
        )values(
            #{user_id}, '리뷰 포인트 적립', +500
        )
    </insert>

    <select id="selectProductReviewDataListByProductId" resultType="java.util.HashMap">
        select 
            bu.profile_image, 
            bu.account,
            pr.*
        from product_review pr
        inner join order_product op on op.id = pr.order_product_id 
        inner join bc_user bu on bu.id = pr.user_id 
        where op.product_id = #{product_id}
        order by pr.id desc
    </select>

    <select id="countOrderProductByOptionValueIds" parameterType="map" resultType="int">
        select coalesce(sum(quantity), 0) as quantity
        from (
        select distinct op.id, op.quantity from order_product op
        inner join order_product_option_value opov on op.id = opov.order_product_id
        where opov.option_value_id in
            <foreach item="item" index="index" collection="orderProductOptionValueIds" open="(" separator="," close=")">
                #{item}
            </foreach>
            and op.status != 'pending'
            group by opov.order_product_id
            having count(distinct opov.option_value_id) = #{optionValueCount}
        ) t1
    </select>

    <select id="selectPurchaseCountByProductId" resultType="int">
        select count(*) from order_product
        where product_id = #{product_id}
        and status not in ('pending', '환불완료', '주문취소');
    </select>

    <select id="selectAdditionalInfoById" resultType="com.bulmeong.basecamp.store.dto.AdditionalInfoDto">
        select * from additional_info
        where id = #{additional_info_id}
    </select>

    <!-- 장바구니에 담기 -->
    <insert id="insertCartProduct">
        <selectKey resultType="int" keyProperty="id" order="AFTER">
            select max(id) from cart_product
        </selectKey>
        insert into cart_product(
            user_id, product_id, quantity
        )values(
            #{user_id}, #{product_id}, #{quantity}
        )
    </insert>

    <insert id="insertCartProductOptionValue">
        insert into cart_product_option_value(
            cart_product_id, option_value_id
        )values(
            #{cart_product_id}, #{option_value_id}
        )
    </insert>

    <select id="selectStoreNamesOfCartProdcutByUserId" resultType="java.lang.String">
        select s.name from cart_product cp
        inner join store_product sp on cp.product_id = sp.id 
        inner join store s on sp.store_id = s.id 
        where user_id = #{user_id}
        group by s.id
    </select>
    
    <select id="selectCartProductDtoList" resultType="com.bulmeong.basecamp.store.dto.CartProductDto">
        select * from cart_product
        where user_id = #{user_id}
    </select>

    <select id="selectStoreDtoByCartProductId" resultType="com.bulmeong.basecamp.store.dto.StoreDto">
        select s.* from cart_product cp
        inner join store_product sp on cp.product_id = sp.id 
        inner join store s on sp.store_id = s.id 
        where cp.id = #{cart_product_id}
    </select>

    <select id="selectCartProductDataById" resultType="java.util.HashMap">
        select 
            sp.name, 
            sp.main_image, 
            sp.price,
            sp.discount_id,
            cp.quantity,
            cp.id,
            cp.product_id
        from cart_product cp
        inner join store_product sp on sp.id = cp.product_id  
        where cp.id = #{cart_product_id}
        group by cp.id
    </select>

    <select id="selectCartProductOptionValueIds" resultType="int">
        select cpov.option_value_id from cart_product cp
        inner join cart_product_option_value cpov on cpov.cart_product_id = cp.id
        where cp.id = #{cart_product_id}
    </select>

    <select id="selectCartProductOptionValuePrimaryKeys" resultType="int">
        select cpov.id from cart_product cp
        inner join cart_product_option_value cpov on cpov.cart_product_id = cp.id
        where cp.id = #{cart_product_id}
    </select>

    <select id="selectOptionValueNameById" resultType="java.lang.String">
        select name from product_option_value pov
        where id = #{id}
    </select>

    <insert id="insertPendingOrder">
        <selectKey resultType="int" keyProperty="id" order="AFTER">
            select max(id) from store_order
        </selectKey>
        insert into store_order(
            user_id, status
        )values(
            #{user_id}, 'pending'
        )
    </insert>

    <select id="selectCartProductById" resultType="com.bulmeong.basecamp.store.dto.CartProductDto">
        select * from cart_product
        where id = #{cart_product_id}
    </select>

    <insert id="insertOrderProduct">
        <selectKey resultType="int" keyProperty="id" order="AFTER">
            select max(id) from order_product
        </selectKey>
        insert into order_product(
            order_id, product_id, quantity, status
        )values(
            #{order_id}, #{product_id}, #{quantity}, 'pending'
        )
    </insert>

    <insert id="insertProductOptionValue">
        insert into order_product_option_value(
            order_product_id, option_value_id
        )values(
            #{order_product_id}, #{option_value_id}
        )
    </insert>

    <select id="selectStoreNamesOfPendingOrderByUserId" resultType="java.lang.String">
        select s.name from store_order so
        inner join order_product op on so.id = op.order_id
        inner join store_product sp on sp.id = op.product_id
        inner join store s on s.id = sp.store_id
        where so.user_id = #{user_id}
        and so.status = 'pending'
        group by s.id
    </select>

    <select id="selectPendingOrderProductDtoList" resultType="com.bulmeong.basecamp.store.dto.OrderProductDto">
        select op.* from order_product op
        inner join store_order so on op.order_id = so.id
        where so.user_id = #{user_id}
        and so.status = 'pending'
    </select>

    <select id="selectStoreDtoByOrderProductId" resultType="com.bulmeong.basecamp.store.dto.StoreDto">
        select s.* from order_product op 
        inner join store_product sp on op.product_id = sp.id
        inner join store s on sp.store_id = s.id
        where op.id = #{order_product_id}
    </select>

    <select id="selectOrderProductDataById" resultType="java.util.HashMap">
        select 
            sp.name,
            sp.main_image,
            sp.price,
            sp.discount_id,
            op.quantity,
            op.id
        from order_product op
        inner join store_product sp on sp.id = op.product_id
        where op.id = #{order_product_id}
        group by op.id
    </select>

    <select id="selectOrderProductOptionValueIds" resultType="int">
        select opov.option_value_id from order_product op
        inner join order_product_option_value opov on opov.order_product_id = op.id
        where op.id = #{order_product_id}
    </select>

    <select id="selectOrderProductOptionValuePrimaryKeys" resultType="int">
        select opov.id from order_product op
        inner join order_product_option_value opov on opov.order_product_id = op.id
        where op.id = #{order_product_id}
    </select>

    <select id="selectPendingOrderDtoListByUserId" resultType="com.bulmeong.basecamp.store.dto.StoreOrderDto">
        select * from store_order
        where user_id = #{user_id}
        and status = 'pending'
    </select>

    <select id="selectPendingOrderProductListByOrderId" resultType="com.bulmeong.basecamp.store.dto.OrderProductDto">
        select * from order_product
        where order_id = #{order_id}
        and status = 'pending'
    </select>

    <delete id="deletePendingOrderById">
        delete from store_order
        where id = #{id}
    </delete>

    <delete id="deletePendingOrderProductById">
        delete from order_product
        where status = 'pending'
        and id = #{order_product_id}
    </delete>

    <delete id="deleteOrderProductOptionValueById">
        delete from order_product_option_value
        where id = #{id}
    </delete>

    <update id="updateStoreOrder">
        update store_order
        set used_point = #{used_point},
            delivery_address = #{delivery_address},
            payment_amount = #{payment_amount},
            receiver_name = #{receiver_name},
            phone = #{phone},
            status = 'complete',
            created_at = now()
        where id = #{id}
    </update>

    <update id="updateOrderProduct">
        update order_product
        set product_price = #{product_price},
            product_main_image = #{product_main_image},
            product_name = #{product_name},
            discount_percentage = #{discount_percentage},
            used_point = #{used_point},
            order_price = #{order_price},
            status = '주문완료'
        where id = #{id}
    </update>

    <insert id="insertPointUsageLog">
        insert into bc_user_mileage_log(
            user_id, mileage_log, change_amount
        )values(
            #{user_id}, '포인트 결제', #{change_amount}
        )
    </insert>

    <insert id="insertPointRefundLog">
        insert into bc_user_mileage_log(
            user_id, mileage_log, change_amount
        )values(
            #{user_id}, '포인트 환불', #{change_amount}
        )
    </insert>

    <!-- <insert id="insertPoint Log">
        insert into bc_user_mileage_log(
            user_id, mileage_log, change_amount
        )values(
            #{user_id}, '구매확정 적립', #{change_amount}
        )
    </insert> -->


    <update id="updateUserMileage">
        update bc_user
        set mileage = mileage-#{used_point}
        where id = #{id}
    </update>

    <update id="updateUserMileagePlus">
        update bc_user
        set mileage = mileage+500
        where id = #{id}
    </update>

    <update id="updateUserMileageRefund">
        update bc_user
        set mileage = mileage+#{refund_mileage}
        where id = #{id}
    </update>

    <delete id="deleteCartProduct">
        delete from cart_product
        where id = #{id}
    </delete>

    <delete id="deleteCartProductOptionValue">
        delete from cart_product_option_value
        where id = #{id}
    </delete>

    <delete id="deleteCartProductOptionValueByCartProductId">
        delete from cart_product_option_value
        where cart_product_id = #{cart_product_id}
    </delete>

    <select id="selectStoreOrderDtoById" resultType="com.bulmeong.basecamp.store.dto.StoreOrderDto">
        select * from store_order
        where id = #{id}
    </select>

    <select id="selectOrderProductListByOrderId" resultType="com.bulmeong.basecamp.store.dto.OrderProductDto">
        select * from order_product
        where order_id = #{order_id}
        <if test="filterOption!=null and filterOption!='전체' and filterOption!='주문완료' and  filterOption!='상품준비중'">
            and status = #{filterOption}
        </if>
        <if test="filterOption=='주문완료'">
            and status in ('주문완료', '상품준비중')
        </if>
    </select>

    <select id="selectOrderProductListForMyOrderListPage" resultType="com.bulmeong.basecamp.store.dto.OrderProductDto">
        select * from order_product
        where order_id = #{order_id}
        <if test="filterOption!=null and filterOption!='전체' and filterOption!='주문완료' and filterOption!='상품준비중' and filterOption!='구매확정'">
            and status = #{filterOption}
        </if>
        <if test="filterOption=='주문완료'">
            and status in ('주문완료', '상품준비중')
        </if>
        <if test="filterOption=='구매확정'">
            and status in ('구매확정', '리뷰작성완료')
        </if>
    </select>

    <select id="orderCompleteCount" resultType="int">
        select count(*) from order_product op
        inner join store_order so on op.order_id = so.id
        where so.user_id = #{user_id}
        and op.status in ('주문완료', '상품준비중')
    </select>

    <select id="deliveryCompleteCount" resultType="int">
        select count(*) from order_product op
        inner join store_order so on op.order_id = so.id
        where so.user_id = #{user_id}
        and op.status = '배송완료'
    </select>

    <select id="purchaseConfirmationCount" resultType="int">
        select count(*) from order_product op
        inner join store_order so on op.order_id = so.id
        where so.user_id = #{user_id}
        and op.status = '구매확정'
    </select>

    <select id="reviewCompleteCount" resultType="int">
        select count(*) from order_product op
        inner join store_order so on op.order_id = so.id
        where so.user_id = #{user_id}
        and op.status = '리뷰작성완료'
    </select>

    <select id="allOrderCount" resultType="int">
        select count(*) from order_product op
        inner join store_order so on op.order_id = so.id
        where so.user_id = #{user_id}
        and op.status not in ('pending', '환불완료', '주문취소')
    </select>

    <select id="selectOrderProductListByStoreId" resultType="com.bulmeong.basecamp.store.dto.OrderProductDto">
        select op.* from order_product op 
        inner join store_product sp on sp.id = op.product_id 
        inner join store s on s.id  = sp.store_id 
        inner join store_order so on so.id = op.order_id
        where s.id = #{store_id}
        and op.status not in ('pending', '환불완료','주문취소')
        order by so.created_at asc
    </select>

    <select id="selectOrderProductDtoById" resultType="com.bulmeong.basecamp.store.dto.OrderProductDto">
        select * from order_product
        where id = #{id}
    </select>

    <select id="selectUserDtoById" resultType="com.bulmeong.basecamp.user.dto.UserDto">
        select * from bc_user
        where id = #{id}
    </select>

    <update id="updateOrderProductStatusToPreparing">
        update order_product
        set status = "상품준비중"
        where id = #{id}
    </update>

    <insert id="insertOrderDeliveryInfo">
        insert into order_delivery_info(
            order_product_id, courier, tracking_number
        )values(
            #{order_product_id}, #{courier}, #{tracking_number}
        )
    </insert>

    <update id="updateOrderProductStatusToDelivered">
        update order_product
        set status = "배송완료"
        where id = #{id}
    </update>

    <select id="selectOrderDeliveryInfoByOrderProductId" resultType="com.bulmeong.basecamp.store.dto.OrderDeliveryInfoDto">
        select * from order_delivery_info
        where order_product_id = #{order_product_id}
    </select>
    
    <insert id="insertUserDeliveryInfo">
        insert into bc_user_delivery_info(
            user_id, receiver_name, phone, delivery_address, is_default_address
        )values(
            #{user_id}, #{receiver_name}, #{phone}, #{delivery_address}, #{is_default_address}
        )
    </insert>

    <update id="updateDefaultDeliveryInfoByUserId">
        update bc_user_delivery_info
        set is_default_address = 0
        where user_id = #{user_id}
    </update>

    <select id="selectUserDeliveryInfoByUserId" resultType="com.bulmeong.basecamp.store.dto.UserDeliveryInfoDto">
        select * from bc_user_delivery_info
        where user_id = #{user_id}
    </select>

    <select id="selectDefaultAddressByUserId" resultType="com.bulmeong.basecamp.store.dto.UserDeliveryInfoDto">
        select * from bc_user_delivery_info
        where user_id = #{user_id}
        and is_default_address = 1
    </select>

    <select id="selectDefaultAddressCountByUserId" resultType="int">
        select count(*) from bc_user_delivery_info
        where user_id = #{user_id}
        and is_default_address = 1
    </select>

    <delete id="deleteUserDeliveryInfoById">
        delete from bc_user_delivery_info
        where id = #{id}
    </delete>

    <select id="selectStoreOrderDtoListByUserId" resultType="com.bulmeong.basecamp.store.dto.StoreOrderDto">
        select * from store_order
        where user_id = #{user_id}
        order by id desc
    </select>

    <select id="selectStoreProductByStoreId" resultType="com.bulmeong.basecamp.store.dto.StoreProductDto">
        select * from store_product
        where store_id = #{store_id}
    </select>

    <select id="selectStoreProductDataListByStoreId" resultType="java.util.HashMap">
        select 
            sp.id, 
            sp.name, 
            sp.price, 
            sp.quantity, 
            sp.status, 
            COALESCE(spd.percentage, 0) AS percentage,
            COALESCE(t1.purchase_quantity, 0) AS purchase_quantity
        from store_product sp 
        left outer join store_product_discount spd on sp.discount_id = spd.id 
        left outer join (
            select sp.id, sum(op.quantity) as purchase_quantity 
            from order_product op 
            inner join store_order so on op.order_id = so.id 
            inner join store_product sp on sp.id = op.product_id 
            where sp.store_id = #{store_id}
            ) t1 on t1.id = sp.id
        where sp.store_id = #{store_id}
        group by sp.id
        order by sp.id desc
    </select>

    <update id="updateOrderProductStatusToConfirm">
        update order_product
        set status = '구매확정'
        where id = #{order_product_id}
    </update>

    <select id="selectOrderProductDataForReview" resultType="java.util.HashMap">
        select op.*, s.name as store_name from order_product op
        inner join store_product sp on op.product_id = sp.id
        inner join store s on sp.store_id = s.id
        where op.id = #{order_product_id}
    </select>

    <insert id="insertProductReview">
        insert into product_review(
            user_id, order_product_id, content, rating
        )values(
            #{user_id}, #{order_product_id}, #{content}, #{rating}
        )
    </insert>

    <update id="updateOrderProductStatusToReviewComplete">
        update order_product
        set status = '리뷰작성완료'
        where id = #{order_product_id}
    </update>

    <select id="selectPurchaseConfirmationList" resultType="java.util.HashMap">
        select op.*, s.name as store_name from order_product op 
        inner join store_product sp on op.product_id = sp.id
        inner join store_order so on so.id = op.order_id 
        inner join store s on s.id = sp.store_id 
        where so.user_id = #{user_id}
        and op.status = '구매확정'
    </select>

    <select id="selectReviewList" resultType="java.util.HashMap">
        select op.*, s.name as store_name, pr.content, pr.rating, pr.id as review_id from order_product op 
        inner join store_product sp on op.product_id = sp.id
        inner join store_order so on so.id = op.order_id 
        inner join store s on s.id = sp.store_id 
        inner join product_review pr on pr.order_product_id = op.id
        where so.user_id = #{user_id}
        and op.status = '리뷰작성완료'
        order by pr.id desc
    </select>

    <select id="selectStoreReviewList" resultType="java.util.HashMap">
        select pr.*, op.product_name, bu.account from product_review pr
        inner join bc_user bu on pr.user_id = bu.id
        inner join order_product op on pr.order_product_id = op.id 
        inner join store_product sp on op.product_id = sp.id 
        inner join store s on s.id = sp.store_id 
        where s.id  = #{store_id}
        order by pr.id desc
    </select>

    <select id="selectReviewData" resultType="java.util.HashMap">
        select pr.*, op.product_name, op.product_id, bu.account from product_review pr
        inner join bc_user bu on pr.user_id = bu.id 
        inner join order_product op on op.id = pr.order_product_id 
        where pr.id = #{review_id}
    </select>

    <select id="selectCurrentReviewNumberById" resultType="int">
        select row_num
        from (
            select *, row_number() over (order by id desc) as row_num
            from product_review
        ) as numbered
        where id = #{review_id}
    </select>

    <!-- <select id="selecReviewIdByOffset" resultType="int">
        select pr.id from product_review pr 
        inner join order_product op on pr.order_product_id = op.id 
        inner join store_product sp on op.product_id = sp.id 
        inner join store s on sp.store_id = s.id 
        where s.id = #{store_id}
		limit 1 offset #{offset}
    </select> -->

    <select id="selectStoreSellerReplyByReviewId" resultType="com.bulmeong.basecamp.store.dto.StoreSellerReplyDto">
        select * from store_seller_reply
        where review_id = #{review_id}
    </select>

    <insert id="insertSellerReply">
        insert into store_seller_reply(
            review_id, content
        )values(
            #{review_id}, #{content}
        )
    </insert>

    <select id="selectOrderProductDataForRefund" resultType="java.util.HashMap">
        select so.delivery_address, so.receiver_name , so.phone, s.name as store_name, op.* from order_product op
        inner join store_order so on op.order_id = so.id 
        inner join store_product sp on sp.id = op.product_id 
        inner join store s on s.id = sp.store_id 
        where op.id = #{order_product_id}
    </select>

    <select id="selectRefundReasonList" resultType="com.bulmeong.basecamp.store.dto.ProductRefundReasonDto">
        select * from refund_reason
    </select>

    <update id="updateOrderProductStatusToRefundComplete">
        update order_product
        set status = '환불완료'
        where id = #{id}
    </update>

    <insert id="insertProductRefund">
        <selectKey resultType="int" keyProperty="id" order="AFTER">
            select max(id) from product_refund
        </selectKey>
        insert into product_refund(
            reason_refund_id, order_product_id, receiver_name, phone, return_address
        )values(
            #{reason_refund_id}, #{order_product_id}, #{receiver_name}, #{phone}, #{return_address}
        )
    </insert>

    <select id="selectRefundProductDataForCompletePage" resultType="java.util.HashMap">
        select 
            pr.*, 
            s.name as store_name, 
            op.quantity,
            op.order_price,
            op.product_name,
            op.product_main_image,
            op.id as order_product_id,
            so.user_id
        from product_refund pr
        inner join order_product op on op.id = pr.order_product_id 
        inner join store_product sp on op.product_id = sp.id 
        inner join store s on s.id = sp.store_id 
        inner join store_order so on so.id = op.order_id 
        where pr.id = #{id}
    </select>

    <insert id="insertProductImage">
        insert into product_image(
            product_id, location
        )values(
            #{product_id}, #{location}
        )
    </insert>

    <select id="selectProductImageDtoListByProductId" resultType="com.bulmeong.basecamp.store.dto.ProductImageDto">
        select * from product_image
        where product_id = #{product_id}
    </select>

    <select id="selectProductPurchaseQuantity" resultType="int">
        select coalesce(sum(op.quantity), 0) from order_product op
        inner join store_product sp on op.product_id = sp.id 
        where sp.id = #{product_id}
        and op.status != 'pending'
    </select>

    <select id="selectCartProductCountByProductId" resultType="int">
        select count(*) from cart_product
        where product_id = #{product_id}
        and user_id = #{user_id}
    </select>

    <delete id="deleteCartProductByProductId">
        delete from cart_product
        where product_id = #{product_id}
        and user_id = #{user_id}
    </delete>

    <select id="selectCartProductIdByOptionValueIds" resultType="Integer">
        select cp.id from cart_product cp
        inner join cart_product_option_value cpov on cp.id = cpov.cart_product_id 
        where cp.user_id = #{user_id}
        and cp.product_id = #{product_id}
        and cpov.option_value_id in
        <foreach item="item" index="index" collection="valueIds" open="(" separator="," close=")">
            #{item}
        </foreach>
        group by cp.id
        having count(distinct cpov.option_value_id) = #{optionValueCount}
    </select>

    <update id="updateCartProductQuantity">
        update cart_product
        set quantity = #{quantity}
        where id = #{cart_product_id}
    </update>

    <select id="selectFiveProductList" resultType="com.bulmeong.basecamp.store.dto.StoreProductDto">
        select * from store_product
        order by id asc
        limit 5
    </select>
    <select id="selectTenProductListDesc" resultType="com.bulmeong.basecamp.store.dto.StoreProductDto">
        select * from store_product
        order by id desc
        limit 10
    </select>

    <select id="selectNewStoreDto" resultType="com.bulmeong.basecamp.store.dto.StoreDto">
        select s.* from store s 
        inner join (
            select s.id, count(sp.id) as product_quantity from store s
            inner join store_product sp on s.id = sp.store_id
            group by s.id
        )t1 on s.id = t1.id
        where t1.product_quantity &gt; 2
        order by s.id desc
        limit 1
    </select>

    <select id="selectNewTenProductDataListByCategoryId" resultType="java.util.HashMap">
        select
            sp.*,
            coalesce(spd.percentage, 0) as percentage,
            s.name as store_name
        from store_product sp
        inner join store s on sp.store_id = s.id
        inner join product_subcategory ps on ps.id = sp.subcategory_id 
        inner join product_category pc on pc.id = ps.category_id 
        left outer join store_product_discount spd on spd.id = sp.discount_id 
        where pc.id= #{category_id}
        order by sp.id desc
        limit 10
    </select>

    <select id="selectNewTenProductDataListBySubcategoryId" resultType="java.util.HashMap">
        select
            sp.*,
            coalesce(spd.percentage, 0) as percentage,
            s.name as store_name
        from store_product sp
        inner join store s on sp.store_id = s.id
        inner join product_subcategory ps on ps.id = sp.subcategory_id 
        inner join product_category pc on pc.id = ps.category_id 
        left outer join store_product_discount spd on spd.id = sp.discount_id 
        where ps.id= #{subcategory_id}
        order by sp.id desc
        limit 10
    </select>

    <select id="selectNewStoreProductDataList" resultType="java.util.HashMap">
        select 
            t2.name as store_name,
            sp2.*,
            sp2.price - sp2.price*COALESCE(spd.percentage, 0) as sale_price
        from (select s.* from store s 
        inner join (
            select s.id, count(sp.id) as product_quantity from store s
            inner join store_product sp on s.id = sp.store_id
            group by s.id
        )t1 on s.id = t1.id
        where t1.product_quantity &gt; 2
        order by s.id desc
        limit 1) t2
        inner join store_product sp2 on t2.id = sp2.store_id 
        left outer join store_product_discount spd on sp2.discount_id = spd.id 
        order by sp2.id desc
        limit 2
    </select>

    <update id="updateStoreDto">
        update store
        set description = #{description},
            main_image = #{main_image}
        where id = #{id}
    </update>

    <select id="selectWishListByUserId" resultType="java.util.HashMap">
        select 
            sp.*,
            s.name as store_name,
            COALESCE(spd.percentage, 0) as percentage,
            sp.price - sp.price*COALESCE(spd.percentage, 0) as sale_price
        from product_wish pw 
        inner join store_product sp on pw.product_id = sp.id 
        inner join store s on s.id = sp.store_id 
        left outer join store_product_discount spd on sp.discount_id = spd.id 
        where pw.user_id = #{user_id}
    </select>

</mapper>