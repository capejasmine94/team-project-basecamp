<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.bulmeong.basecamp.insta.mapper.InstaSqlMapper">

    <!-- 로그인한 유저가 인스타 유저에 등록되어있는지 확인하는 쿼리 -->
    <select id="instaUserConfirom" resultType="int">
        select count(*) from bc_user bu
        inner join bc_insta_user_info biui on biui.user_id = bu.id
        where account = #{account}
        and password = #{password}
    </select>

    <insert id="insertInstaUserInfo">
        insert into bc_insta_user_info(
            user_id,
            insta_nickname,
            insta_profile_img,
            intro
        )values(
            #{user_id},
            #{insta_nickname},
            #{insta_profile_img},
            #{intro}
        )
    </insert>

    <!-- 세션 id로 인스타유저 정보 뽑는 쿼리 -->
    <select id="selectUserInfoByUserId" resultType="com.bulmeong.basecamp.insta.dto.InstaUserInfoDto">
        select * from bc_insta_user_info
        where user_id = #{user_id}
    </select>

    <!-- 인스타 id로 인스타유저 정보 뽑는 쿼리 -->
    <select id="selectUserInfoById" resultType="com.bulmeong.basecamp.insta.dto.InstaUserInfoDto">
        select * from bc_insta_user_info
        where id = #{id}
    </select>

    <!-- 유저가 작성한 게시글 카운트 -->
    <select id="selectArticleCountByUserId" resultType="int">
        select count(*) from bc_insta_article where user_id = #{user_id}
    </select>

    <!-- 챗지피티 물어보니까 parameterType, useGeneratedKeys, keyProperty 얘네가 있어야만 article_id를 받아온다...? 왜 있어야되는지 모르겠음 -->
    <!-- 게시판 insert -->
    <insert id="insertInstaArticle" parameterType="com.bulmeong.basecamp.insta.dto.InstaArticleDto" useGeneratedKeys="true" keyProperty="id">
        insert into bc_insta_article(
            user_id,
            content
        )values(
            #{user_id},
            #{content}
        )
    </insert>

    <!-- 게시판 이미지 insert -->
    <insert id="insertInstaArticleImg" parameterType="com.bulmeong.basecamp.insta.dto.InstaArticleImgDto">
        insert into bc_insta_article_img(
            article_id,
            img_link
        )values(
            #{article_id},
            #{img_link}
        )
    </insert>

    <select id="selectArticleAll" resultType="com.bulmeong.basecamp.insta.dto.InstaArticleDto">
        select * from bc_insta_article order by id desc
    </select>

    <select id="selectArticleImgByArticleId" resultType="com.bulmeong.basecamp.insta.dto.InstaArticleImgDto">
        select * from bc_insta_article_img where article_id = #{article_id}
    </select>

    <!-- 댓글 관련 (자바스크립트 사용) -->
    <insert id="createComment">
        insert into bc_insta_article_comment(
            user_id,
            article_id,
            comment
        )values(
            #{user_id},
            #{article_id},
            #{comment}
        )
    </insert>

    <select id="getCommentList" resultType="com.bulmeong.basecamp.insta.dto.InstaArticleCommentDto">
        select * from bc_insta_article_comment
        where article_id = #{article_id}
        order by id desc
    </select>

    <delete id="deleteComment">
        delete from bc_insta_article_comment where id = #{id}
    </delete>

    <select id="commentCountByArticleId" resultType="int">
        select count(*) from bc_insta_article_comment
        where article_id = #{article_id}
    </select>


    <!-- 대댓글 _ 자바스크립트 -->
    <insert id="createReply">
        insert into bc_insta_article_reply(
            user_id,
            comment_id,
            reply
        )values(
            #{user_id},
            #{comment_id},
            #{reply}
        )
    </insert>

    <select id="getReplyList" resultType="com.bulmeong.basecamp.insta.dto.InstaArticleReplyDto">
        select * from bc_insta_article_reply
        where comment_id = #{comment_id}
        order by id desc
    </select>

    <delete id="deleteReply">
        delete from bc_insta_article_reply
        where id = #{id}
    </delete>

    <select id="replyCountByCommentId" resultType="int">
        select count(*) from bc_insta_article_reply
        where comment_id = #{comment_id}
    </select>



    <!-- 게시글 좋아요 -->
    <insert id="createLike">
        insert into bc_insta_article_like(
            article_id,
            user_id
        )values(
            #{article_id},
            #{user_id}
        )
    </insert>

    <select id="countLikeByArticleId" resultType="int">
        select count(*) from bc_insta_article_like
        where article_id = #{article_id}
    </select>

    <select id="countLikeByArticleIdAndUserId" resultType="int">
        select count(*) from bc_insta_article_like
        where article_id = #{article_id}
        and user_id = #{user_id}
    </select>

    <delete id="deleteLikeByArticleIdAndUserId">
        delete from bc_insta_article_like
        where article_id = #{article_id}
        and user_id = #{user_id}
    </delete>

    <!-- 게시물 삭제를 이제서야.. -->
    <delete id="deleteArticleById">
        delete from bc_insta_article where id = ${id}
    </delete>



    <!-- 팔로우 _ 좋아요 기능 사용(자바스크립트) -->
    <insert id="insertFollowByUserId">
        insert into bc_insta_follow(
            follower_user_id,
            following_user_id
        )values(
            #{follower_user_id},
            #{following_user_id}
        )
    </insert>

    <!-- 몇번 회원이 몇명을 팔로우 했는지 -->
    <select id="followerCountByFollowerUserId" resultType="int">
        select count(*) from bc_insta_follow
        where follower_user_id = #{follower_user_id}
    </select>

    <!-- 몇번 회원을 몇명이 팔로잉 했지 -->
    <select id="followingCountByFollowingUserId" resultType="int">
        select count(*) from bc_insta_follow
        where following_user_id = #{following_user_id}
    </select>

    <!-- 내가 팔로우를 했는지 -->
    <select id="confirmFollowStatus" resultType="int">
        select count(*) from bc_insta_follow
        where follower_user_id = #{follower_user_id}
        and following_user_id = #{following_user_id}
    </select>

    <delete id="deleteFollowByFollowerUserIdAndFollowingUserId">
        delete from bc_insta_follow
        where follower_user_id = #{follower_user_id}
        and following_user_id = #{following_user_id}
    </delete>



    <!-- 댓글 좋아요(자바스크립트) -->
    <insert id="createCommentLike">
        insert into bc_insta_comment_like(
            user_id,
            comment_id
        )values(
            #{user_id},
            #{comment_id}
        )
    </insert>

    <!-- 몇번 댓글에 좋아요 개수가 몇인지 -->
    <select id="countLikeByCommentId" resultType="int">
        select count(*) from bc_insta_comment_like
        where comment_id = #{comment_id}
    </select>

    <!-- 댓글 좋아요 여부 -->
    <select id="countLikeByCommentIdAndUserId" resultType="int">
        select count(*) from bc_insta_comment_like
        where comment_id = #{comment_id}
        and user_id = #{user_id}
    </select>

    <delete id="deleteLikeByCommentIdAndUserId">
        delete from bc_insta_comment_like
        where comment_id = #{comment_id}
        and user_id = #{user_id}
    </delete>





    <!-- 드디어 해시태그>~< -->

    <!-- 1. 이미 존재하는 태그 ID 확인 -->
    <select id="instaHashtagConfirm" resultType="int">
            select id from bc_insta_tag 
            where replace(text, ' ', '')
            like replace(#{text}, ' ', '')
    </select>

    <!-- 1 확인 후 if, else로 1 -> 2 -> 3 // 1 -> 3 -->

    <!-- 2. 새로운 태그 삽입 -->
    <insert id="insertHashtagLetsGo">
        insert into bc_insta_tag(
            text
        )values(
            #{text}
        )
    </insert>

    <!-- 3. 게시글-태그 관계 삽입 -->
    <insert id="insertArticletag">
        insert into bc_insta_article_tag(
            article_id,
            tag_id
        )values(
            #{article_id},
            #{tag_id}
        )
    </insert>

    <!-- 위에 3개 쿼리 다 합친거 _ insert에서 selectKey는 한번만 사용가능해서 쓸 수 없음 -->
    <!-- <insert id="insertHashtagLetsGo">
            insert전 태그가 존재하는지 확인 후 없으면 insert
             있을 경우 keyProperty로 해당하는 id 사용
        <selectKey keyProperty="id" resultType="int" order="BEFORE">
            select id from bc_insta_tag 
            where replace(text, ' ', '') like replace(#{text}, ' ', '')
        </selectKey>        
        
            태그가 없으면 삽입
        <if test="id == null">
            insert into bc_insta_tag(
                text
            )values(
                #{text}
            )
                새로 생성된 ID 가져오기
            <selectKey keyProperty="id" resultType="int" order="AFTER">
                select last_insert_id()
            </selectKey>
        </if>
        
            bc_insta_article_tag에 삽입
        insert into bc_insta_article_tag(
            article_id, tag_id
        )values(
            #{article_id}, #{id}
        )
    </insert> -->

    <!-- resultType="java.lang.String" _ id를 받아야해서 resultType 변경해줬음 -->
    <select id="selectHashtagByArticleId" resultType="com.bulmeong.basecamp.insta.dto.InstaTagDto">
        select bit2.* from bc_insta_article_tag biat
        inner join bc_insta_tag bit2 on bit2.id = biat.tag_id
        where article_id = #{article_id}
    </select>



    <!-- 유저가 작성한 게시글 이미지List 출력 -->
    <select id="instaWriteArticleGetImgByUserId" resultType="com.bulmeong.basecamp.insta.dto.InstaArticleImgDto">
        select biai.*
        from bc_insta_article bia
        inner join (
            select article_id, min(id) as max_image_id
            from bc_insta_article_img
            group by article_id
        ) latest_images on bia.id = latest_images.article_id
        inner join bc_insta_article_img biai on biai.id = latest_images.max_image_id
        where user_id = #{user_id}
        order by id desc
    </select>

    <!-- 유저가 저장한 북마크 게시글 이미지List 출력 -->
    <!-- 최신 저장한게 최상단오게 -->
    <select id="instaSaveBookmarkByUserId" resultType="com.bulmeong.basecamp.insta.dto.InstaArticleImgDto">
        select biai.*
        from bc_insta_bookmark bib
        inner join (
            select article_id, min(id) as max_image_id
            from bc_insta_article_img
            group by article_id
        ) latest_images on bib.article_id = latest_images.article_id
        inner join bc_insta_article_img biai on biai.id = latest_images.max_image_id
        where user_id = #{user_id}
        order by bib.id desc
    </select>



    <!-- 북마크 -->
    <insert id="createBookmarkByUserIdAndArticleId">
        insert into bc_insta_bookmark(
            user_id,
            article_id
        )values(
            #{user_id},
            #{article_id}
        )
    </insert>

    <!-- 0이면 북마크 안 누름, 1이면 북마크 누름 -->
    <select id="confirmBookmarkByArticleIdAndUserId" resultType="int">
        select count(*) from bc_insta_bookmark
        where article_id = #{article_id}
        and user_id = #{user_id}
    </select>

    <delete id="deleteBookmarkByArticleIdAndUserId">
        delete from bc_insta_bookmark
        where article_id = #{article_id}
        and user_id = #{user_id}
    </delete>


    <!-- 인스스 _ 로그인 유저가 팔로우 한 유저 출력 -->
    <select id="selectInstaStoryUserInfoByFollowerUserId" resultType="com.bulmeong.basecamp.insta.dto.InstaUserInfoDto">
        select biui.* from bc_insta_follow bif
        inner join bc_insta_user_info biui on biui.id = bif.following_user_id
        where follower_user_id = #{follower_user_id}
        order by id desc
    </select>

    <!-- 태그 클릭시 나오는 페이지 -->
    <select id="selectArticleFirstImgByTagId" resultType="com.bulmeong.basecamp.insta.dto.InstaArticleImgDto">
        select biai.* from bc_insta_tag bit2
        inner join bc_insta_article_tag biat on biat.tag_id = bit2.id
        inner join bc_insta_article_img biai on biai.article_id = biat.article_id
        inner join (
            select article_id, min(id) AS min_id
            from bc_insta_article_img
            group by article_id
        ) biai_min on biai.id = biai_min.min_id
        where bit2.id = #{tag_id}
        order by biai.article_id desc
    </select>

    <select id="selectTagByTagId" resultType="com.bulmeong.basecamp.insta.dto.InstaTagDto">
        select * from bc_insta_tag
        where id = #{id}
    </select>


    <!-- 일반 검색 -->
    <!-- 해시태그에 저장 되어있는 text가 아니라면 일반 검색 content로 insert 됨 -->
    <insert id="insertSearchContent">
        insert into bc_insta_search(
            user_id,
            tag_id,
            content
        )values(
            #{user_id},
            null,
            #{content}
        )
    </insert>

    <select id="selectArticleImgByLikeSearchContentAndLikeArticleContent" resultType="com.bulmeong.basecamp.insta.dto.InstaArticleImgDto">
        select biai.* from 
            (select bia.* from bc_insta_search bis
            inner join bc_insta_article bia 
            on bia.content like concat('%', #{content}, '%')
            where bis.content like concat('%', #{content}, '%')
            group by bia.id	
        ) as search_article_result
        inner join bc_insta_article_img biai
        on biai.article_id = search_article_result.id
        group by search_article_result.id
        order by id desc
    </select>

    <select id="selectResultContentText" resultType="java.lang.String">
        select DISTINCT content from bc_insta_search
        where content = #{content}
        and user_id = #{user_id}
    </select>

    <!-- 해시태그(입력) 검색 -->
    <!-- 검색에 해시태그 입력시 tag테이블에 저장 되어있는 text인지 확인 -->
    <select id="selectTagDtoByTagText" resultType="com.bulmeong.basecamp.insta.dto.InstaTagDto">
        select * from bc_insta_tag where text = #{text}
    </select>

    <insert id="insertSearchTagId">
        insert into bc_insta_search(
            user_id,
            tag_id,
            content
        )values(
            #{user_id},
            #{tag_id},
            null
        )
    </insert>

    <!-- 태그Dto에 정확히 insert되어있는것만 출력함 _ like 구분 x -->
    <select id="selectArticleImgBySearchTagText" resultType="com.bulmeong.basecamp.insta.dto.InstaArticleImgDto">
        select biai.* from bc_insta_article_tag biat
        inner join
            (select distinct bit2.id from bc_insta_search bis 
                inner join bc_insta_tag bit2
                on bit2.id = bis.tag_id
                where bit2.text = #{text}
            ) as filter_tag_id
        on biat.tag_id = filter_tag_id.id
        inner join bc_insta_article_img biai
        on biai.article_id = biat.article_id
        group by biai.article_id
        order by biai.article_id desc
    </select>

    <!-- 최근 검색 -->
    <select id="recentSearchByUserId" resultType="java.util.HashMap">
        select distinct bis.tag_id,
                        bis.content,
                        bit2.text
        from bc_insta_search bis
        left outer join bc_insta_tag bit2 on bit2.id = bis.tag_id
        where user_id = #{user_id}
        order by bis.id desc
        limit 10
    </select>

    <!-- 일반 content 삭제 -->
    <delete id="recentSearchDeleteByContentAndUserId">
        delete from bc_insta_search
        where content = #{content}
        and user_id = #{user_id}
    </delete>

    <!-- 해시태그 삭제 -->
    <delete id="recentSearchDeleteByTagIdAndUserId">
        delete from bc_insta_search
        where tag_id = #{tag_id}
        and user_id = #{user_id}
    </delete>

    <!-- 검색 기록 전체 삭제 -->
    <delete id="recentSearchAllDeleteByUserId">
        delete from bc_insta_search
        where user_id = #{user_id}
    </delete>

    <!-- 게시글 좋아요 목록 -->
    <select id="selectArticleLikeUserInfo" resultType="java.util.HashMap">
        select biui.*, 
            (bial.user_id = #{user_id}) as is_logged_user,
            (bif.follower_user_id is not null) as is_following
        from bc_insta_article_like bial
        inner join bc_insta_user_info biui
            on biui.id = bial.user_id
        left outer join bc_insta_follow bif 
            on bif.follower_user_id = #{user_id}
            and bif.following_user_id = biui.id
        where bial.article_id = #{article_id}
        order by is_logged_user desc, <!-- is_logged_user 로그인 한 사용자 -->
                is_following desc, <!-- is_following 로그인 한 사용자가 게시글 좋아요 유저들을 팔로우 했는지에대한 유무 확인 -->
                bial.id desc
    </select>
    
    <!-- 게시물 상세글 페이지 -->
    <!-- 유저프로필, 닉네임, 게시글 내용 -->
    <select id="articleDtailPageSelectUserProfileAndUserNicknameAndArticleContent" resultType="java.util.HashMap">
        select insta_profile_img,
               insta_nickname,
               content,
               bia.created_at,
               biui.id as user_id,
               biui.user_id as s_user_id,
               bia.id as article_id
        from bc_insta_article bia
        inner join bc_insta_user_info biui on biui.id = bia.user_id
        where bia.id = #{article_id}
    </select>

    <select id="selectTagTextByArticleId" resultType="com.bulmeong.basecamp.insta.dto.InstaTagDto">
        select bit2.* from bc_insta_article_tag biat
        inner join bc_insta_tag bit2 on bit2.id = biat.tag_id
        where article_id = #{article_id}
    </select>
</mapper>




